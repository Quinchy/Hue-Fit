generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
}

model User {
  id         Int      @id @default(autoincrement())
  userNo     String   @unique
  roleId     Int
  username   String
  password   String
  status     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Role            Role             @relation(fields: [roleId], references: [id])
  AdminProfile    AdminProfile?
  CustomerProfile CustomerProfile?
  VendorProfile   VendorProfile?
  OwnedShop       Shop?            @relation("ShopOwner")

  Order              Order[]
  Cart               Cart[]
  PartnershipRequest PartnershipRequest[]
  CustomerAddress    CustomerAddress[]
  CustomerFeature    CustomerFeature[]
  Notifications      Notification[]
  GeneratedOutfits   GeneratedOutfit[]

  @@unique([username, roleId])
}

model AdminProfile {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  profilePicture String?
  firstName      String
  lastName       String
  email          String?
  contactNo      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}

model CustomerProfile {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  profilePicture String?
  email          String?
  firstName      String
  lastName       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}

model CustomerFeature {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  height     Float
  weight     Float
  age        Int
  skintone   String
  bodyShape  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}

model CustomerAddress {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  buildingNo   String?
  street       String?
  barangay     String
  municipality String
  province     String
  postalCode   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}

model VendorProfile {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  shopId         Int?
  profilePicture String?
  firstName      String
  lastName       String
  contactNo      String
  email          String
  position       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  User User  @relation(fields: [userId], references: [id])
  Shop Shop? @relation("ShopEmployees", fields: [shopId], references: [id], onDelete: Cascade)
}

model PartnershipRequest {
  id         Int      @id @default(autoincrement())
  requestNo  String   @unique
  userId     Int
  shopId     Int
  status     String   @default("PENDING")
  message    String?
  isSeen     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
  Shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model Shop {
  id          Int      @id @default(autoincrement())
  shopNo      String   @unique
  addressId   Int      @unique
  logo        String?
  name        String
  description String?
  contactNo   String?
  email       String?
  ownerUserId Int      @unique
  status      String   @default("PENDING")
  openingTime String
  closingTime String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Owner              User                  @relation("ShopOwner", fields: [ownerUserId], references: [id])
  ShopAddress        ShopAddress           @relation("ShopAddress", fields: [addressId], references: [id])
  Employee           VendorProfile[]       @relation("ShopEmployees")
  PartnershipRequest PartnershipRequest[]
  BusinessLicense    ShopBusinessLicense[]
  Product            Product[]
  Tag                Tag[]
  Type               Type[]
  Category           Category[]
  Color              Color[]
  Size               Size[]
  Measurement        Measurement[]
  Order              Order[]
  CartItem           CartItem[]
  Notification       Notification[]
  DeliveryFee        DeliveryFee[]
  Payment            Payment[]
}

model ShopAddress {
  id           Int      @id @default(autoincrement())
  buildingNo   String?
  street       String?
  barangay     String
  municipality String
  province     String
  postalCode   String
  googleMapId  Int      @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  GoogleMapLocation GoogleMapLocation @relation(fields: [googleMapId], references: [id])
  Shop              Shop?             @relation("ShopAddress")
}

model GoogleMapLocation {
  id         Int      @id @default(autoincrement())
  name       String?
  latitude   Float
  longitude  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ShopAddress ShopAddress?
}

model ShopBusinessLicense {
  id         Int      @id @default(autoincrement())
  shopId     Int
  licenseUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model Product {
  id            Int      @id @default(autoincrement())
  productNo     String   @unique
  shopId        Int
  typeId        Int
  categoryId    Int
  tagId         Int
  name          String
  description   String?
  thumbnailURL  String
  totalQuantity Int      @default(0)
  isArchived    Boolean? @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // No change here. The 'onDelete: Cascade' goes on the child references
  Shop     Shop     @relation(fields: [shopId], references: [id])
  Type     Type     @relation(fields: [typeId], references: [id])
  Category Category @relation(fields: [categoryId], references: [id])
  Tag      Tag      @relation(fields: [tagId], references: [id])

  // These children will now have 'onDelete: Cascade' on their side
  ProductVariant     ProductVariant[]
  ProductMeasurement ProductMeasurement[]
  OrderItem          OrderItem[]
  CartItem           CartItem[]
}

model ProductMeasurement {
  id            Int      @id @default(autoincrement())
  productId     Int
  sizeId        Int
  measurementId Int
  value         Float
  unit          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  Measurement Measurement @relation(fields: [measurementId], references: [id])
  Size        Size        @relation(fields: [sizeId], references: [id])
}

model Type {
  id         Int      @id @default(autoincrement())
  shopId     Int
  name       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Shop         Shop          @relation(fields: [shopId], references: [id], onDelete: Cascade)
  Products     Product[]
  Tags         Tag[]
  Measurements Measurement[]
}

model Category {
  id         Int      @id @default(autoincrement())
  shopId     Int
  name       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Shop     Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  Products Product[]
}

model Tag {
  id         Int      @id @default(autoincrement())
  shopId     Int
  typeId     Int
  name       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Shop     Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  Type     Type      @relation(fields: [typeId], references: [id])
  Products Product[]
}

model ProductVariant {
  id               Int      @id @default(autoincrement())
  productId        Int
  productVariantNo String   @unique
  colorId          Int
  price            Decimal  @db.Decimal(10, 2)
  totalQuantity    Int      @default(0)
  pngClotheURL     String?
  isArchived       Boolean? @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Product             Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  Color               Color                 @relation(fields: [colorId], references: [id])
  ProductVariantImage ProductVariantImage[]
  ProductVariantSize  ProductVariantSize[]
  OrderItem           OrderItem[]
  CartItem            CartItem[]
  GeneratedOutfitItem GeneratedOutfitItem[]
}

model ProductVariantSize {
  id               Int      @id @default(autoincrement())
  productVariantId Int
  sizeId           Int
  quantity         Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  ProductVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  Size           Size           @relation(fields: [sizeId], references: [id])
  OrderItem      OrderItem[]
  CartItem       CartItem[]
}

model ProductVariantImage {
  id               Int      @id @default(autoincrement())
  productVariantId Int
  imageURL         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  ProductVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
}

model Color {
  id         Int      @id @default(autoincrement())
  shopId     Int
  name       String
  hexcode    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Shop           Shop             @relation(fields: [shopId], references: [id], onDelete: Cascade)
  ProductVariant ProductVariant[]
}

model Size {
  id           Int      @id @default(autoincrement())
  shopId       Int
  name         String
  abbreviation String
  nextId       Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Shop               Shop                 @relation(fields: [shopId], references: [id], onDelete: Cascade)
  ProductVariantSize ProductVariantSize[]
  ProductMeasurement ProductMeasurement[]
}

model Measurement {
  id         Int      @id @default(autoincrement())
  shopId     Int
  typeId     Int
  name       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Shop                Shop                 @relation(fields: [shopId], references: [id], onDelete: Cascade)
  Type                Type                 @relation(fields: [typeId], references: [id])
  ProductMeasurements ProductMeasurement[]
}

model Order {
  id              Int      @id @default(autoincrement())
  orderNo         String   @unique(map: "Unique_OrderNo")
  shopId          Int
  userId          Int
  paymentMethod   String
  status          String   @default("PENDING")
  askingForCancel Boolean  @default(false)
  cancelReason    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
  Shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)

  OrderItems OrderItem[]
  Payment    Payment[]
}

model OrderItem {
  id                   Int      @id @default(autoincrement())
  orderId              Int
  productId            Int
  productVariantId     Int
  productVariantSizeId Int
  quantity             Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  Order              Order              @relation(fields: [orderId], references: [id])
  Product            Product            @relation(fields: [productId], references: [id])
  ProductVariant     ProductVariant     @relation(fields: [productVariantId], references: [id])
  ProductVariantSize ProductVariantSize @relation(fields: [productVariantSizeId], references: [id])
}

model Cart {
  id         Int      @id @default(autoincrement())
  userId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User      User       @relation(fields: [userId], references: [id])
  CartItems CartItem[]
}

model CartItem {
  id                   Int      @id @default(autoincrement())
  cartId               Int
  shopId               Int
  productId            Int
  productVariantId     Int
  productVariantSizeId Int
  quantity             Int      @default(1)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  Cart               Cart               @relation(fields: [cartId], references: [id])
  Shop               Shop               @relation(fields: [shopId], references: [id], onDelete: Cascade)
  Product            Product            @relation(fields: [productId], references: [id])
  ProductVariant     ProductVariant     @relation(fields: [productVariantId], references: [id])
  ProductVariantSize ProductVariantSize @relation(fields: [productVariantSizeId], references: [id])
}

model Notification {
  id      Int    @id @default(autoincrement())
  title   String
  message String
  // If this notification is for a particular user:
  userId  Int?
  // If this notification is for a particular shop:
  shopId  Int?

  read       Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relations to User or Shop are optional 
  User User? @relation(fields: [userId], references: [id])
  Shop Shop? @relation(fields: [shopId], references: [id])
}

model Payment {
  id         Int      @id @default(autoincrement())
  shopId     Int?
  orderId    Int
  amount     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  Order Order @relation(fields: [orderId], references: [id])
  Shop  Shop? @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model GeneratedOutfit {
  id         Int      @id @default(autoincrement())
  userId     Int
  name       String?
  style      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User  User                  @relation(fields: [userId], references: [id])
  items GeneratedOutfitItem[]
}

model GeneratedOutfitItem {
  id                Int      @id @default(autoincrement())
  generatedOutfitId Int      
  productVariantId  Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  GeneratedOutfit GeneratedOutfit @relation(fields: [generatedOutfitId], references: [id])
  ProductVariant  ProductVariant  @relation(fields: [productVariantId], references: [id])
}

model InquiryMessage {
  id         Int      @id @default(autoincrement())
  inquiryNo  String   @unique
  email      String
  subject    String
  message    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model DeliveryFee {
  id         Int      @id @default(autoincrement())
  shopId     Int      @unique
  feeType    String
  feeAmount  Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
}
