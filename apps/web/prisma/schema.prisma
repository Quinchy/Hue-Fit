generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         Int      @id @default(autoincrement())
  userNo     String   @unique  // Make userNo unique
  username   String   @unique
  password   String
  status     String
  roleId     Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Role          Roles         @relation(fields: [roleId], references: [id])
  AdminProfile  AdminProfiles?
  CustomerProfile CustomerProfiles?
  VendorProfiles   VendorProfile?
  OwnedShop     Shops?         @relation("ShopOwner") // Reference to Shops as owner
}

model Roles {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  Users       Users[]
  Permissions Permissions[]
}

model Pages {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  Permissions Permissions[]
}

model Permissions {
  id          Int      @id @default(autoincrement())
  can_view    Boolean  @default(false)
  can_edit    Boolean  @default(false)
  can_delete  Boolean  @default(false)
  can_add     Boolean  @default(false)
  roleId      Int
  pageId      Int

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  Role        Roles    @relation(fields: [roleId], references: [id])
  Page        Pages    @relation(fields: [pageId], references: [id])
  
  @@unique([roleId, pageId])
}

model AdminProfiles {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique // Ensures one-to-one relation with Users
  profilePicture String
  firstName      String
  lastName       String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  User           Users    @relation(fields: [userId], references: [id]) // Relation to Users
}

model CustomerProfiles {
  id                 Int      @id @default(autoincrement())
  userId             Int   @unique
  customerFeaturesId Int?
  email              String?  // Nullable field for email
  firstName          String
  lastName           String
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  // Assuming relation to Users
  User               Users    @relation(fields: [userId], references: [id])
}

model PartnershipRequests {
  id                Int       @id @default(autoincrement())
  requestNo         String    @unique
  firstName         String
  lastName          String
  contactNo         String
  email             String
  position          String
  businessLicense   String   
  shopName          String
  shopContactNo     String
  buildingNo        String?
  street            String?
  barangay          String
  municipality      String
  province          String
  postalNumber      String
  googleMapPlaceName String?   
  longitude          Float?
  latitude           Float?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  status            String    @default("PENDING") // New status field
}

model VendorProfile {
  id             Int             @id @default(autoincrement())
  userId         Int             @unique
  shopId         Int
  profilePicture String?
  firstName      String
  lastName       String
  contactNo      String
  email          String
  position       String
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt

  User           Users           @relation(fields: [userId], references: [id])
  Shop           Shops           @relation("ShopEmployees", fields: [shopId], references: [id])
}

model Shops {
  id              Int             @id @default(autoincrement())
  shopNo          String          @unique
  logo            String?
  name            String
  description     String?
  status          String
  contactNo       String
  ownerUserNo     String          @unique // Now using userNo from Users
  addressId       Int             @unique
  businessLicense String
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt

  Owner           Users           @relation("ShopOwner", fields: [ownerUserNo], references: [userNo]) // Reference to Users by userNo
  Address         Addresses       @relation("ShopAddress", fields: [addressId], references: [id])
  Employees       VendorProfile[] @relation("ShopEmployees")
}

model Addresses {
  id                Int                @id @default(autoincrement())
  buildingNo        String
  street            String
  barangay          String
  municipality      String
  province          String
  postalCode        String
  googleMapId       Int                @unique // Ensures one-to-one relationship with GoogleMapLocations
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt

  GoogleMapLocation GoogleMapLocations @relation(fields: [googleMapId], references: [id])
  Shop              Shops?              @relation("ShopAddress")
}

model GoogleMapLocations {
  id             Int          @id @default(autoincrement())
  placeName      String?
  latitude       Float?
  longitude      Float?
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt

  Address        Addresses?   // Back relation, no need to specify @relation attributes here
}